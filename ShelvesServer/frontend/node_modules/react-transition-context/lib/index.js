'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransitionListener = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function overallTransitionState(parentState, childState) {
  if (parentState === 'out' || childState === 'out') return 'out';
  if (parentState === 'leaving' || childState === 'leaving') return 'leaving';
  if (parentState === 'appearing' || childState === 'appearing') return 'appearing';
  if (parentState === 'entering' || childState === 'entering') return 'entering';
  return childState;
}

var TransitionContext = function (_Component) {
  _inherits(TransitionContext, _Component);

  function TransitionContext() {
    var _Object$getPrototypeO;

    var _temp, _this, _ret;

    _classCallCheck(this, TransitionContext);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(TransitionContext)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.listeners = [], _this.transitionContext = {
      addListener: function addListener(listener) {
        _this.listeners.push(listener);
      },
      removeListener: function removeListener(listener) {
        _this.listeners.splice(_this.listeners.indexOf(listener), 1);
      },
      getState: function getState() {
        var transitionContext = _this.context.transitionContext;

        return overallTransitionState(transitionContext && transitionContext.getState(), _this.props.transitionState);
      }
    }, _this.callListeners = function (event) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this.listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _listener = _step.value;

          if (_listener[event] instanceof Function) {
            _listener[event]();
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }, _this.handleTransition = function (prevState, nextState) {
      if (nextState !== prevState) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _this.listeners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _listener2 = _step2.value;

            if (_listener2.onTransition instanceof Function) {
              _listener2.onTransition(prevState, nextState);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        switch (nextState) {
          case 'out':
            if (prevState === 'leaving') {
              _this.callListeners('didLeave');
            }
            break;
          case 'in':
            if (prevState === 'appearing') {
              _this.callListeners('didAppear');
              _this.callListeners('didComeIn');
            } else if (prevState === 'entering') {
              _this.callListeners('didEnter');
              _this.callListeners('didComeIn');
            }
            break;
          case 'appearing':
            if (prevState === 'out' || prevState === 'leaving') {
              _this.callListeners('willAppear');
              _this.callListeners('willComeIn');
            }
            break;
          case 'entering':
            if (prevState === 'out' || prevState === 'leaving') {
              _this.callListeners('willEnter');
              _this.callListeners('willComeIn');
            }
            break;
          case 'leaving':
            if (prevState === 'in' || prevState === 'appearing' || prevState === 'entering') {
              _this.callListeners('willLeave');
            }
            break;
        }
      }
    }, _this.onTransition = function (prevState, nextState) {
      var transitionState = _this.props.transitionState;

      _this.handleTransition(overallTransitionState(prevState, transitionState), overallTransitionState(nextState, transitionState));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TransitionContext, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        transitionContext: this.transitionContext
      };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var transitionContext = this.context.transitionContext;

      if (transitionContext) {
        // flow workaround
        var _listener3 = this;
        transitionContext.addListener(_listener3);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.transitionContext.getState() === 'in') this.callListeners('didComeIn');
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      var prevTransitionContext = this.context.transitionContext;
      var nextTransitionContext = nextContext.transitionContext;
      if (prevTransitionContext !== nextTransitionContext) {
        // flow workaround
        var _listener4 = this;
        if (prevTransitionContext != null) prevTransitionContext.removeListener(_listener4);
        if (nextTransitionContext != null) nextTransitionContext.addListener(_listener4);
      }

      this.prevState = this.transitionContext.getState();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var prevState = this.prevState;
      var transitionContext = this.transitionContext;

      var nextState = transitionContext.getState();
      this.handleTransition(prevState, nextState);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var transitionContext = this.context.transitionContext;

      if (transitionContext) {
        // flow workaround
        var _listener5 = this;
        transitionContext.removeListener(_listener5);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return TransitionContext;
}(_react.Component);

TransitionContext.propTypes = {
  transitionState: _react.PropTypes.oneOf(['out', 'in', 'appearing', 'entering', 'leaving']),
  children: _react.PropTypes.any
};
TransitionContext.contextTypes = {
  transitionContext: _react.PropTypes.object
};
TransitionContext.childContextTypes = {
  transitionContext: _react.PropTypes.object.isRequired
};
exports.default = TransitionContext;

var TransitionListener = exports.TransitionListener = function (_Component2) {
  _inherits(TransitionListener, _Component2);

  function TransitionListener() {
    var _Object$getPrototypeO2;

    var _temp2, _this2, _ret2;

    _classCallCheck(this, TransitionListener);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_Object$getPrototypeO2 = Object.getPrototypeOf(TransitionListener)).call.apply(_Object$getPrototypeO2, [this].concat(args))), _this2), _this2.updateEvents = function () {
      var props = arguments.length <= 0 || arguments[0] === undefined ? _this2.props : arguments[0];

      _this2.onTransition = props.onTransition;
      _this2.willComeIn = props.willComeIn;
      _this2.didComeIn = props.didComeIn;
      _this2.willAppear = props.willAppear;
      _this2.didAppear = props.didAppear;
      _this2.willEnter = props.willEnter;
      _this2.didEnter = props.didEnter;
      _this2.willLeave = props.willLeave;
      _this2.didLeave = props.didLeave;
    }, _temp2), _possibleConstructorReturn(_this2, _ret2);
  }

  _createClass(TransitionListener, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var transitionContext = this.context.transitionContext;

      this.updateEvents();
      if (transitionContext) {
        // flow workaround
        var _listener6 = this;
        transitionContext.addListener(_listener6);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var transitionContext = this.context.transitionContext;

      if (!transitionContext || transitionContext.getState() === 'in') {
        this.didComeIn && this.didComeIn();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      var prevTransitionContext = this.context.transitionContext;
      var nextTransitionContext = nextContext.transitionContext;
      if (prevTransitionContext !== nextTransitionContext) {
        // flow workaround
        var _listener7 = this;
        if (prevTransitionContext != null) prevTransitionContext.removeListener(_listener7);
        if (nextTransitionContext != null) nextTransitionContext.addListener(_listener7);
      }
      this.updateEvents(nextProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var transitionContext = this.context.transitionContext;

      if (transitionContext) {
        // flow workaround
        var _listener8 = this;
        transitionContext.removeListener(_listener8);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return TransitionListener;
}(_react.Component);

TransitionListener.contextTypes = {
  transitionContext: _react.PropTypes.object
};